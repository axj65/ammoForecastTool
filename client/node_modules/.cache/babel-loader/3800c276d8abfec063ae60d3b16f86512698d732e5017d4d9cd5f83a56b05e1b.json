{"ast":null,"code":"!function (globals) {\n  'use strict';\n\n  var _imports = {};\n  if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    _imports.bytesToHex = require('convert-hex').bytesToHex;\n    _imports.convertString = require('convert-string');\n    module.exports = sha256;\n  } else {\n    _imports.bytesToHex = globals.convertHex.bytesToHex;\n    _imports.convertString = globals.convertString;\n    globals.sha256 = sha256;\n  }\n\n  /*\n  CryptoJS v3.1.2\n  code.google.com/p/crypto-js\n  (c) 2009-2013 by Jeff Mott. All rights reserved.\n  code.google.com/p/crypto-js/wiki/License\n  */\n\n  // Initialization round constants tables\n  var K = [];\n\n  // Compute constants\n  !function () {\n    function isPrime(n) {\n      var sqrtN = Math.sqrt(n);\n      for (var factor = 2; factor <= sqrtN; factor++) {\n        if (!(n % factor)) return false;\n      }\n      return true;\n    }\n    function getFractionalBits(n) {\n      return (n - (n | 0)) * 0x100000000 | 0;\n    }\n    var n = 2;\n    var nPrime = 0;\n    while (nPrime < 64) {\n      if (isPrime(n)) {\n        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n        nPrime++;\n      }\n      n++;\n    }\n  }();\n  var bytesToWords = function bytesToWords(bytes) {\n    var words = [];\n    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n      words[b >>> 5] |= bytes[i] << 24 - b % 32;\n    }\n    return words;\n  };\n  var wordsToBytes = function wordsToBytes(words) {\n    var bytes = [];\n    for (var b = 0; b < words.length * 32; b += 8) {\n      bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);\n    }\n    return bytes;\n  };\n\n  // Reusable object\n  var W = [];\n  var processBlock = function processBlock(H, M, offset) {\n    // Working variables\n    var a = H[0],\n      b = H[1],\n      c = H[2],\n      d = H[3];\n    var e = H[4],\n      f = H[5],\n      g = H[6],\n      h = H[7];\n\n    // Computation\n    for (var i = 0; i < 64; i++) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        var gamma0x = W[i - 15];\n        var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        var gamma1x = W[i - 2];\n        var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n      var ch = e & f ^ ~e & g;\n      var maj = a & b ^ a & c ^ b & c;\n      var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      var t1 = h + sigma1 + ch + K[i] + W[i];\n      var t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n\n    // Intermediate hash value\n    H[0] = H[0] + a | 0;\n    H[1] = H[1] + b | 0;\n    H[2] = H[2] + c | 0;\n    H[3] = H[3] + d | 0;\n    H[4] = H[4] + e | 0;\n    H[5] = H[5] + f | 0;\n    H[6] = H[6] + g | 0;\n    H[7] = H[7] + h | 0;\n  };\n  function sha256(message, options) {\n    ;\n    if (message.constructor === String) {\n      message = _imports.convertString.UTF8.stringToBytes(message);\n    }\n    var H = [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19];\n    var m = bytesToWords(message);\n    var l = message.length * 8;\n    m[l >> 5] |= 0x80 << 24 - l % 32;\n    m[(l + 64 >> 9 << 4) + 15] = l;\n    for (var i = 0; i < m.length; i += 16) {\n      processBlock(H, m, i);\n    }\n    var digestbytes = wordsToBytes(H);\n    return options && options.asBytes ? digestbytes : options && options.asString ? _imports.convertString.bytesToString(digestbytes) : _imports.bytesToHex(digestbytes);\n  }\n  sha256.x2 = function (message, options) {\n    return sha256(sha256(message, {\n      asBytes: true\n    }), options);\n  };\n}(this);","map":{"version":3,"names":["globals","_imports","module","exports","bytesToHex","require","convertString","sha256","convertHex","K","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","nPrime","pow","bytesToWords","bytes","words","i","b","length","wordsToBytes","push","W","processBlock","H","M","offset","a","c","d","e","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","message","options","constructor","String","UTF8","stringToBytes","m","l","digestbytes","asBytes","asString","bytesToString","x2"],"sources":["/Users/albertjoe33/mac_only_docs/inf385t/client/node_modules/sha256/lib/sha256.js"],"sourcesContent":["!function(globals) {\n'use strict'\n\nvar _imports = {}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  _imports.bytesToHex = require('convert-hex').bytesToHex\n  _imports.convertString = require('convert-string')\n  module.exports = sha256\n} else {\n  _imports.bytesToHex = globals.convertHex.bytesToHex\n  _imports.convertString = globals.convertString\n  globals.sha256 = sha256\n}\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n// Initialization round constants tables\nvar K = []\n\n// Compute constants\n!function () {\n  function isPrime(n) {\n    var sqrtN = Math.sqrt(n);\n    for (var factor = 2; factor <= sqrtN; factor++) {\n      if (!(n % factor)) return false\n    }\n\n    return true\n  }\n\n  function getFractionalBits(n) {\n    return ((n - (n | 0)) * 0x100000000) | 0\n  }\n\n  var n = 2\n  var nPrime = 0\n  while (nPrime < 64) {\n    if (isPrime(n)) {\n      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n      nPrime++\n    }\n\n    n++\n  }\n}()\n\nvar bytesToWords = function (bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nvar wordsToBytes = function (words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\n// Reusable object\nvar W = []\n\nvar processBlock = function (H, M, offset) {\n  // Working variables\n  var a = H[0], b = H[1], c = H[2], d = H[3]\n  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n    // Computation\n  for (var i = 0; i < 64; i++) {\n    if (i < 16) {\n      W[i] = M[offset + i] | 0\n    } else {\n      var gamma0x = W[i - 15]\n      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                    (gamma0x >>> 3)\n\n      var gamma1x = W[i - 2];\n      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                    (gamma1x >>> 10)\n\n      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n    }\n\n    var ch  = (e & f) ^ (~e & g);\n    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n    var t1 = h + sigma1 + ch + K[i] + W[i];\n    var t2 = sigma0 + maj;\n\n    h = g;\n    g = f;\n    f = e;\n    e = (d + t1) | 0;\n    d = c;\n    c = b;\n    b = a;\n    a = (t1 + t2) | 0;\n  }\n\n  // Intermediate hash value\n  H[0] = (H[0] + a) | 0;\n  H[1] = (H[1] + b) | 0;\n  H[2] = (H[2] + c) | 0;\n  H[3] = (H[3] + d) | 0;\n  H[4] = (H[4] + e) | 0;\n  H[5] = (H[5] + f) | 0;\n  H[6] = (H[6] + g) | 0;\n  H[7] = (H[7] + h) | 0;\n}\n\nfunction sha256(message, options) {;\n  if (message.constructor === String) {\n    message = _imports.convertString.UTF8.stringToBytes(message);\n  }\n\n  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n  var m = bytesToWords(message);\n  var l = message.length * 8;\n\n  m[l >> 5] |= 0x80 << (24 - l % 32);\n  m[((l + 64 >> 9) << 4) + 15] = l;\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i);\n  }\n\n  var digestbytes = wordsToBytes(H);\n  return options && options.asBytes ? digestbytes :\n         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n         _imports.bytesToHex(digestbytes)\n}\n\nsha256.x2 = function(message, options) {\n  return sha256(sha256(message, { asBytes:true }), options)\n}\n\n}(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}