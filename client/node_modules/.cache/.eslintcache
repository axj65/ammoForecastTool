[{"/Users/albertjoe33/mac_only_docs/inf385t/client/src/index.js":"1","/Users/albertjoe33/mac_only_docs/inf385t/client/src/App.js":"2","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/login.js":"3","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/register.js":"4","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/navbar.js":"5","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/form.js":"6","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/table.js":"7","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/sidebar.js":"8","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/myevents.js":"9","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/saveEvent.js":"10","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/faq.js":"11"},{"size":316,"mtime":1698692848883,"results":"12","hashOfConfig":"13"},{"size":1446,"mtime":1699986138950,"results":"14","hashOfConfig":"13"},{"size":2962,"mtime":1699986230463,"results":"15","hashOfConfig":"13"},{"size":3918,"mtime":1699986230463,"results":"16","hashOfConfig":"13"},{"size":863,"mtime":1699986138950,"results":"17","hashOfConfig":"13"},{"size":5282,"mtime":1699986138950,"results":"18","hashOfConfig":"13"},{"size":6060,"mtime":1699986138950,"results":"19","hashOfConfig":"13"},{"size":2642,"mtime":1699986138950,"results":"20","hashOfConfig":"13"},{"size":2238,"mtime":1699986138950,"results":"21","hashOfConfig":"13"},{"size":3126,"mtime":1699986138950,"results":"22","hashOfConfig":"13"},{"size":1340,"mtime":1699986138950,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ei2vi",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/albertjoe33/mac_only_docs/inf385t/client/src/index.js",[],[],"/Users/albertjoe33/mac_only_docs/inf385t/client/src/App.js",[],[],"/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/login.js",[],[],"/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/register.js",["62"],[],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Link } from \"react-router-dom\";\nimport bcrypt from \"bcryptjs\"; // Import bcryptjs\n\n\nconst sha256 = require('sha256');\n\nexport default function Register() {\n  const [form, setForm] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const navigate = useNavigate();\n\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n    // This function will handle the submission.\n    async function onSubmit(e) {\n      e.preventDefault();\n\n          // Hash both the password and confirmPassword before sending them to the server\n      const hashedPassword = sha256(form.password);\n      const hashedConfirmPassword = sha256(form.confirmPassword);\n\n      const newUser = {\n        ...form,\n        password: hashedPassword,\n        confirmPassword: hashedConfirmPassword,\n      };\n      \n      try {\n        const response = await fetch(\"http://localhost:5050/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(newUser),\n        });\n\n      const data = await response.text();\n\n      if (response.ok) {\n        window.alert(\"Registered Successfully!\");\n        navigate(\"/login\");\n      } else {\n        window.alert(data);\n      }\n    } catch (error) {\n      window.alert(\n        \"There was a problem with the registration request: \" + error.message\n      );\n    }\n\n    setForm({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    });\n  }\n\n\n \n // This following section will display the form that takes the input from the user.\n return (\n  <div className=\"container text-left\" style={{ marginTop: \"130px\" }}>\n    <br/>\n     <h1>Register</h1>\n     <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n         <label htmlFor=\"firstName\"> First Name</label>\n         <input\n           type=\"firstName\"\n           className=\"form-control\"\n           id=\"firstName\"\n           value={form.firstName}\n           onChange={(e) => updateForm({ firstName: e.target.value })}\n         />\n       </div>\n       <div className=\"form-group\">\n         <label htmlFor=\"lastName\"> Last Name</label>\n         <input\n           type=\"lastName\"\n           className=\"form-control\"\n           id=\"lastName\"\n           value={form.lastName}\n           onChange={(e) => updateForm({ lastName: e.target.value })}\n         />\n       </div>\n       <div className=\"form-group\">\n         <label htmlFor=\"email\">Email</label>\n         <input\n           type=\"text\"\n           className=\"form-control\"\n           id=\"email\"\n           value={form.email}\n           onChange={(e) => updateForm({ email: e.target.value })}\n         />\n       </div>\n       <div className=\"form-group\">\n         <label htmlFor=\"password\">Password</label>\n         <input\n           type=\"password\"\n           className=\"form-control\"\n           id=\"password\"\n           value={form.password}\n           onChange={(e) => updateForm({ password: e.target.value })}\n         />\n       </div>\n       <div className=\"form-group\">\n         <label htmlFor=\"confirmPassword\"> Confirm Password</label>\n         <input\n           type=\"password\"\n           className=\"form-control\"\n           id=\"confirmPassword\"\n           value={form.confirmPassword}\n           onChange={(e) => updateForm({ confirmPassword: e.target.value })}\n         />\n       </div>\n       <div className=\"form-group\">\n         <input\n           type=\"submit\"\n           value=\"Register\"\n           className=\"btn btn-submit\"\n         />\n       </div>\n     </form>\n\n     <br />\n      <p>Already had an account?     <Link to=\"/login\">Login Here</Link></p>\n     <br />\n\n\n   </div>\n );\n}\n\n\n","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/navbar.js",["63"],[],"import React from \"react\";\n//import brandLogo from '../images/zara-logo.png';\n \nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n \n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n \n// Here, we display our Navbar\nexport default function Navbar() {\n return (\n    <nav role=\"main\" id=\"navbar\" className=\"navbar navbar-expand-lg navbar-dark --black\">\n        <div className=\"container-fluid\">\n            <a id=\"brandfont\" className=\"navbar-brand ms-3\" href=\"/../index_home.html\">Ammunition Forecast Tool</a>\n        <div>\n            <ul className=\"navbar-nav navi-pills me-3\">\n                 <li className=\"nav-item\">\n                 <a id=\"header-btn-yellow\" className=\"nav-link\" href=\"/login\">Log In</a>\n                </li>\n             </ul>\n        </div>       \n        </div>\n    </nav>\n );\n}","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/form.js",["64"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst weaponTypes = {\n  individual: [\"M4\", \"M249\", \"M17\", \"M110\", \"M2010\", \"M107\"],\n  groundCrew: [\"M240\", \"M2\", \"MK19\"],\n  vehicleCrew: [\"Abrams\", \"BFV\", \"Stryker\"],\n  collective: [\"Squad\", \"Platoon\", \"Company\"]\n};\n\nfunction Form() {\n  const navigate = useNavigate();\n\n  const [showDetails, setShowDetails] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(\"\");\n  const [selectedWeapon, setSelectedWeapon] = useState(\"\");\n  const [numberToTrain, setNumberToTrain] = useState(0);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  useEffect(() => {\n    setIsFormValid(selectedEvent !== '' && selectedWeapon !== '' && numberToTrain > 0);\n  }, [selectedEvent, selectedWeapon, numberToTrain]);\n  \n  const handleEventClick = (event) => {\n    setSelectedEvent(event);\n    setShowDetails(true);\n    setSelectedWeapon(weaponTypes[event][0]);\n    setNumberToTrain(0);\n  };\n\n  // Handler for weapon type dropdown\n  const handleWeaponChange = (event) => {\n    setSelectedWeapon(event.target.value);\n  };\n\n  // Handler for number to train textbox\n  const handleNumberChange = (event) => {\n    setNumberToTrain(event.target.value);\n  };\n\n  const nextButtonStyle = {\n    width: '100px', // Set the width you prefer for the bigger button\n    height: '30px', // Set the height you prefer for the bigger button\n    backgroundColor: isFormValid ? 'yellow' : 'grey',\n    opacity: isFormValid ? 1 : 0.5,\n    pointerEvents: isFormValid ? 'auto' : 'none', // Disables the button interaction when form is invalid\n    borderRadius: '0px',\n  };\n\n  // Optional: Handler for when you want to save the details\n  const handleSaveDetails = async () => {\n    console.log('Save details handler called');\n    try {\n      const trainingDetails = {\n        event: selectedEvent,\n        weapon: selectedWeapon,\n        number: numberToTrain\n      };\n  \n      const response = await fetch('/api/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(trainingDetails),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      navigate('/table', { state: trainingDetails });\n      //navigate('/table');\n\n    } catch (error) {\n      console.error(\"Failed to save details and navigate:\", error);\n    }\n  };\n  \n\n  // A function to get button classes\n  const getButtonClasses = (event) => {\n    let classes = `btn btn-primary btn-lg rounded mb-3`;\n    if (selectedEvent === event) {\n      classes += ' btn-active';\n    }\n    if ([\"groundCrew\", \"vehicleCrew\", \"collective\"].includes(event)) {\n      classes += ' disabled-button';\n    }\n    return classes;\n  };\n\n  return (\n    <div className=\"form-container mt-5\">\n      <div className=\"selection-container\">\n        <br/>\n        <strong style={{ fontSize: \"20px\" }}>Select Event Type:</strong>\n        <br/>\n        <br/>\n        <div className=\"btn-group\">\n          {Object.keys(weaponTypes).map((event) => (\n            <button\n              key={event}\n              onClick={() => handleEventClick(event)}\n              className={getButtonClasses(event)}\n            >\n              {event.charAt(0).toUpperCase() + event.slice(1)}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <br/>\n\n      {showDetails && (\n        <>\n          <p className=\"mb-2 mx-auto\"><strong style={{ fontSize: \"20px\" }}>Training Details:</strong></p>\n          <div className=\"container mt-1 container-section\">\n            <div className=\"row\">\n              <div className=\"col-md-8 form-container\">\n                <div className=\"mb-4\">\n                  <label htmlFor=\"dropdown\" className=\"form-label1\">Weapon Type</label>\n                  <select className=\"form-select\" id=\"dropdown\" value={selectedWeapon} onChange={handleWeaponChange}>\n                    {weaponTypes[selectedEvent].map((type) => (\n                      <option key={type} value={type}>{type}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <div className=\"col-md-4 form-container\">\n                <div className=\"mb-4 mx-auto\">\n                  <label htmlFor=\"textBox\" className=\"form-label2\">Number to Train</label>\n                  <input \n                  type=\"number\" \n                  className=\"form-control\" \n                  id=\"textBox\"\n                  value={numberToTrain} \n                  onChange={handleNumberChange}\n                  placeholder=\"Enter number\" \n                  style={{ width: \"100%\", padding: \"5px\" }} \n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <br/>\n          <br/>\n\n          <button\n            onClick={handleSaveDetails}\n            className=\"btn btn-lg float-end\"\n            style={nextButtonStyle}\n            disabled={!isFormValid} // This property will make the button not clickable when the form is invalid\n          >\n            NEXT\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n\n","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/table.js",["65"],[],"import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\n\n\nfunction Table() {\n  const [data, setData] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [numberToTrain, setNumberToTrain] = useState(1); // Default to 1 if not specified\n\n  useEffect(() => {\n    const query = location.state || {};\n    setNumberToTrain(query.number || 1); // Set number to train from query\n\n    if (query.weapon) {\n      query.eventType = query.weapon + '.*';\n    }\n\n    const searchParams = new URLSearchParams(query).toString();\n\n    const fetchData = async () => {\n      const response = await fetch(`/table?${searchParams}`);\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n  }, [location]);\n\n  // This function groups the data by eventType\n  const groupByEventType = (data) => {\n    return data.reduce((acc, item) => {\n      const { eventType } = item;\n      acc[eventType] = acc[eventType] || [];\n      acc[eventType].push(item);\n      return acc;\n    }, {});\n  };\n\n  // This function calculates the 'x People' row by multiplying each value with numberToTrain\n  const calculateXPeopleRow = (detail) => {\n    return Object.keys(detail).reduce((acc, key) => {\n      acc[key] = key === 'ammoType' ? detail[key] : detail[key] * numberToTrain;\n      return acc;\n    }, {});\n  };\n\n  const groupedData = groupByEventType(data);\n\n  // This function calculates the values for the last table (Total Ammo Required)\n  const calculateAmmoTotals = (groupedData) => {\n    const totals = {};\n  \n    Object.values(groupedData).forEach(eventDataSet => {\n      eventDataSet.forEach(item => {\n        const ammoType = item.ammoType;\n        const totalQuantity = item.data['Total'] * numberToTrain;\n  \n        if (!totals[ammoType]) {\n          totals[ammoType] = 0;\n        }\n        \n        totals[ammoType] += totalQuantity;\n      });\n    });\n  \n    return totals;\n  };\n  \n  const ammoTotals = calculateAmmoTotals(groupedData);\n  \n  // This function handles the download PDF button\n  const handleDownloadPdf = () => {\n    // Target the specific container holding the tables\n    const content = document.getElementById('tables-container'); \n  \n    html2canvas(content, {\n      scale: 3, // You can adjust the scale for better quality\n      useCORS: true\n    }).then(canvas => {\n      const imgData = canvas.toDataURL('image/png');\n  \n      // Calculate the PDF page size based on the canvas size\n      const pdfWidth = canvas.width;\n      const pdfHeight = canvas.height;\n  \n      // Create a PDF with calculated dimensions\n      const pdf = new jsPDF({\n        orientation: pdfWidth > pdfHeight ? 'landscape' : 'portrait',\n        unit: 'px',\n        format: [pdfWidth, pdfHeight]\n      });\n  \n      pdf.addImage(imgData, 'PNG', 25, 0, pdfWidth-50, pdfHeight);\n      pdf.save('tables-screenshot.pdf');\n    });\n  };\n  \n  const handleSaveData = () => {\n    // Navigate to SaveEvent component with table data\n    navigate('/saveEvent', { state: { tableData: data } });\n  };\n\n  return (\n    <div className=\"container mt-5\">\n    <div id=\"tables-container\">\n      <br/>\n      <br/>\n      <h2>Training Qualification Details</h2>\n      <br/>\n      {location.state.event && <p><strong>Event Type:</strong> {location.state.event}</p>}\n      {location.state.weapon && <p><strong>Weapon Type:</strong> {location.state.weapon}</p>}\n      {location.state.number && <p><strong>Number to Train:</strong> {location.state.number}</p>}\n\n      {Object.keys(groupedData).map((eventType, index) => {\n      const eventDataSet = groupedData[eventType];\n\n      if (eventDataSet.length === 0 || !eventDataSet[0].data) {\n        return null; // or some error component\n      }\n\n      // Headers should exclude 'ammoType' since it's handled separately\n      const headers = Object.keys(eventDataSet[0].data).filter(header => header !== 'ammoType' && header !== 'Total');\n\n  return (\n    <div key={index}>\n      <br/>\n      <h3>{eventType}</h3>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Ammo Type</th>\n            {headers.map(header => (\n              <th key={header}>{header}</th>\n            ))}\n            <th>Total</th> \n          </tr>\n        </thead>\n        <tbody>\n          {eventDataSet.map((item, idx) => (\n            <>\n              <tr key={`per-person-${idx}`}>\n                <td>Per Person</td>\n                <td>{item.ammoType}</td>\n                {headers.map(header => (\n                  <td key={header}>{item.data[header]}</td>\n                ))}\n                <td>{item.data.Total}</td>  \n              </tr>\n              <tr key={`x-people-${idx}`} className=\"table-info\">\n                <td>x{numberToTrain} People</td>\n                <td>{item.ammoType}</td>\n                {headers.map(header => (\n                  <td key={header}>{item.data[header] * numberToTrain}</td>\n                ))}\n                <td>{item.data.Total * numberToTrain}</td>\n              </tr>\n            </>\n          ))}\n        </tbody>\n      </table>\n    </div>\n        );\n      })}\n    <div className=\"mt-4\">\n      <br/>\n      <h3>Total Ammo Required</h3>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Ammo Type</th>\n            <th>Total Quantity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(ammoTotals).map(ammoType => (\n            <tr key={ammoType}>\n              <td>{ammoType}</td>\n              <td>{ammoTotals[ammoType]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n    <br/>\n  </div>\n  <div className=\"button-container\">\n    <button className=\"btn btn-submit\" onClick={handleDownloadPdf}>Download as PDF</button>\n    <button className=\"btn btn-submit\" onClick={handleSaveData}>Save Event</button>\n  </div>\n    <br/>\n    <br/>\n  </div>\n  );\n}\n\nexport default Table;\n","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/sidebar.js",["66","67"],[],"import React, { useRef, useState, useEffect } from \"react\";\n\n//import react icon will need to put'npm install react-icons' in the client folder\n//library in https://react-icons.github.io/react-icons/search?q=Bilog\nimport { BiAddToQueue, BiCalendarEvent, BiInfoCircle, BiSend, BiLogOut } from \"react-icons/bi\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n\nexport default function Sidebar() {\n  const mySidebarRef = useRef(null);\n  const [mini, setMini] = useState(true);\n  const toggleSidebar = (isMouseEnter) => {\n    const mySidebar = mySidebarRef.current;\n    if (isMouseEnter && !mini) {\n      mySidebar.style.width = \"13.5rem\";\n      setMini(true);\n    } else if (!isMouseEnter && mini) {\n      mySidebar.style.width = \"4.75rem\";\n      setMini(false);\n    }\n  };\n  useEffect(() => {\n    const mySidebar = mySidebarRef.current;\n    const handleMouseEnter = () => {\n      toggleSidebar(true);\n    };\n    const handleMouseLeave = () => {\n      toggleSidebar(false);\n    };\n    mySidebar.addEventListener(\"mouseenter\", handleMouseEnter);\n    mySidebar.addEventListener(\"mouseleave\", handleMouseLeave);\n    return () => {\n      mySidebar.removeEventListener(\"mouseenter\", handleMouseEnter);\n      mySidebar.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [mini, toggleSidebar]);\n  const spacing = '1.25';\n  return (\n    <nav role=\"Side\" className=\"sidebar\" id=\"mySidebar\" ref={mySidebarRef}>\n      <ol className=\"nav text-left\">\n        <li>\n          <NavLink to=\"/app\" activeClassName=\"active-link\">\n            <BiAddToQueue size={24} style={{ marginRight: spacing +'em' }} />\n            <span>Create Event</span>\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/myevents\" exact activeClassName=\"active-link\">\n            <BiCalendarEvent size={24} style={{ marginRight: spacing+'em' }} />\n            <span>My Events</span>\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/faq\" activeClassName=\"active-link\">\n            <BiInfoCircle size={24} style={{ marginRight: spacing +'em'}} />\n            <span>FAQs</span>\n          </NavLink>\n        </li>\n        <li>\n          <a href=\"/../index_home.html#contact-bg\" activeClassName=\"active-link\">\n            <BiSend size={24} style={{ marginRight: `${spacing}em` }} />\n            <span>Contact Us</span>\n          </a>\n        </li>\n        <li>\n          <NavLink to=\"/app\" role=\"link\">\n            <BiLogOut size={24} style={{ marginRight: spacing+'em' }} />\n            <span>Log Out</span>\n          </NavLink>\n        </li>\n      </ol>\n    </nav>\n  );\n}","/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/myevents.js",[],[],"/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/saveEvent.js",[],[],"/Users/albertjoe33/mac_only_docs/inf385t/client/src/components/faq.js",[],[],{"ruleId":"68","severity":1,"message":"69","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":8,"column":10,"nodeType":"70","messageId":"71","endLine":8,"endColumn":17},{"ruleId":"68","severity":1,"message":"73","line":73,"column":13,"nodeType":"70","messageId":"71","endLine":73,"endColumn":17},{"ruleId":"68","severity":1,"message":"74","line":45,"column":9,"nodeType":"70","messageId":"71","endLine":45,"endColumn":28},{"ruleId":"75","severity":1,"message":"76","line":14,"column":9,"nodeType":"77","endLine":23,"endColumn":4},{"ruleId":"78","severity":1,"message":"79","line":41,"column":10,"nodeType":"80","endLine":41,"endColumn":21},"no-unused-vars","'bcrypt' is defined but never used.","Identifier","unusedVar","'NavLink' is defined but never used.","'data' is assigned a value but never used.","'calculateXPeopleRow' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'toggleSidebar' function makes the dependencies of useEffect Hook (at line 38) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'toggleSidebar' in its own useCallback() Hook.","VariableDeclarator","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute"]